package main

import (
    "crypto/tls"
    "encoding/json"
    "flag"
    "fmt"
    "log"
    "net/http"
    "os"
    "path/filepath"
    "strings"
    "sync"
    "time"

    "github.com/gin-gonic/gin"
    "github.com/google/uuid"
    "github.com/wneessen/go-mail"
)

// –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
type MailConfig struct {
    Host        string
    Port        int
    Username    string
    Password    string
    To          string
    ToFile      string
    Subject     string
    Body        string
    BodyFile    string
    IsHTML      bool
    Attachments string
    MessageID   string
}

type EmailLog struct {
    ID         string            `json:"id"`
    Timestamp  time.Time         `json:"timestamp"`
    From       string            `json:"from"`
    Subject    string            `json:"subject"`
    Status     string            `json:"overall_status"`
    Recipients []RecipientStatus `json:"recipients"`
}

type RecipientStatus struct {
    Email   string    `json:"email"`
    Status  string    `json:"status"`
    Time    time.Time `json:"time"`
    Error   string    `json:"error,omitempty"`
    Message string    `json:"message,omitempty"`
}

type RecipientsFile struct {
    Emails []string `json:"emails"`
}

type SendEmailRequest struct {
    To          []string `json:"to" binding:"required"`
    Subject     string   `json:"subject" binding:"required"`
    Body        string   `json:"body"`
    BodyFile    string   `json:"body_file,omitempty"`
    IsHTML      bool     `json:"is_html,omitempty"`
    Attachments []string `json:"attachments,omitempty"`
    MessageID   string   `json:"message_id,omitempty"`
}

type SendEmailResponse struct {
    ID      string `json:"id"`
    Status  string `json:"status"`
    Message string `json:"message"`
}

type StatusResponse struct {
    ID        string            `json:"id"`
    Timestamp time.Time         `json:"timestamp"`
    Status    string            `json:"overall_status"`
    Details   []RecipientStatus `json:"details,omitempty"`
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
var (
    smtpHost     string
    smtpPort     int
    smtpUsername string
    smtpPassword string
    apiPort      string
    
    // CLI —Ñ–ª–∞–≥–∏
    cliTo          string
    cliToFile      string
    cliSubject     string
    cliBody        string
    cliBodyFile    string
    cliIsHTML      bool
    cliAttachments string
    cliMessageID   string
)

func main() {
    // –ü–∞—Ä—Å–∏–º —Ñ–ª–∞–≥–∏
    parseFlags()

    // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –ø–æ—Ä—Ç API, –∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    if apiPort != "" {
        startAPIServer()
    } else {
        // –ò–Ω–∞—á–µ —Ä–∞–±–æ—Ç–∞–µ–º –≤ CLI —Ä–µ–∂–∏–º–µ
        runCLI()
    }
}

func parseFlags() {
    // –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–ª–∞–≥–∏
    flag.StringVar(&smtpHost, "host", "mail.example.com", "SMTP —Ö–æ—Å—Ç")
    flag.IntVar(&smtpPort, "port", 25, "SMTP –ø–æ—Ä—Ç")
    flag.StringVar(&smtpUsername, "user", "archive@mail.example.com", "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    flag.StringVar(&smtpPassword, "pass", "StrongPass", "–ü–∞—Ä–æ–ª—å")
    flag.StringVar(&apiPort, "api", "", "REST API –ø–æ—Ä—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä :8080)")
    
    // CLI —Ñ–ª–∞–≥–∏
    flag.StringVar(&cliTo, "to", "", "–ü–æ–ª—É—á–∞—Ç–µ–ª—å (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)")
    flag.StringVar(&cliToFile, "toFile", "", "JSON —Ñ–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π")
    flag.StringVar(&cliSubject, "subject", "–¢–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ", "–¢–µ–º–∞ –ø–∏—Å—å–º–∞")
    flag.StringVar(&cliBody, "body", "", "–¢–µ–∫—Å—Ç –ø–∏—Å—å–º–∞")
    flag.StringVar(&cliBodyFile, "bodyFile", "", "–§–∞–π–ª —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º –ø–∏—Å—å–º–∞")
    flag.BoolVar(&cliIsHTML, "html", false, "HTML —Ñ–æ—Ä–º–∞—Ç")
    flag.StringVar(&cliAttachments, "attach", "", "–§–∞–π–ª—ã –¥–ª—è –≤–ª–æ–∂–µ–Ω–∏—è (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)")
    flag.StringVar(&cliMessageID, "id", "", "ID –ø–∏—Å—å–º–∞ (–∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω)")

    flag.Parse()
}

func runCLI() {
    config := &MailConfig{
        Host:        smtpHost,
        Port:        smtpPort,
        Username:    smtpUsername,
        Password:    smtpPassword,
        To:          cliTo,
        ToFile:      cliToFile,
        Subject:     cliSubject,
        Body:        cliBody,
        BodyFile:    cliBodyFile,
        IsHTML:      cliIsHTML,
        Attachments: cliAttachments,
        MessageID:   cliMessageID,
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    if config.To == "" && config.ToFile == "" {
        fmt.Println("–û—à–∏–±–∫–∞: –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ -to –∏–ª–∏ -toFile")
        fmt.Println("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ CLI —Ä–µ–∂–∏–º–µ:")
        fmt.Println("  ./go-mail -to email@example.com -subject '–¢–µ–º–∞' -body '–¢–µ–∫—Å—Ç'")
        fmt.Println("  ./go-mail -toFile recipients.json -subject '–¢–µ–º–∞' -body '–¢–µ–∫—Å—Ç'")
        fmt.Println("\n–í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:")
        flag.PrintDefaults()
        os.Exit(1)
    }

    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if err := os.MkdirAll("logs", 0755); err != nil {
        log.Fatal("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏ logs: ", err)
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –ø–∏—Å—å–º–∞ –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
    if config.MessageID == "" {
        config.MessageID = generateMessageID()
    }

    fmt.Printf("üìß –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞ ID: %s\n", config.MessageID)
    fmt.Printf("   –°–µ—Ä–≤–µ—Ä: %s:%d\n", config.Host, config.Port)
    fmt.Printf("   –û—Ç: %s\n", config.Username)
    fmt.Printf("   –¢–µ–º–∞: %s\n", config.Subject)

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
    recipients, err := getRecipients(config)
    if err != nil {
        log.Fatal("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: ", err)
    }

    if len(recipients) == 0 {
        log.Fatal("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã –ø–æ–ª—É—á–∞—Ç–µ–ª–∏")
    }

    fmt.Printf("   –ü–æ–ª—É—á–∞—Ç–µ–ª–∏: %s\n", strings.Join(recipients, ", "))

    // –°–æ–∑–¥–∞–µ–º –ª–æ–≥-—Ñ–∞–π–ª
    logEntry := &EmailLog{
        ID:         config.MessageID,
        Timestamp:  time.Now(),
        From:       config.Username,
        Subject:    config.Subject,
        Recipients: make([]RecipientStatus, 0, len(recipients)),
    }

    // –ï—Å–ª–∏ –æ–¥–∏–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—å - —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
    // –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ - –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è
    if len(recipients) == 1 {
        if err := sendEmail(config, recipients[0], logEntry); err != nil {
            log.Fatal("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ", err)
        }
    } else {
        sendEmailsAsync(config, recipients, logEntry)
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
    if allSuccess(logEntry.Recipients) {
        logEntry.Status = "success"
    } else if anySuccess(logEntry.Recipients) {
        logEntry.Status = "partial_success"
    } else {
        logEntry.Status = "failed"
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ª–æ–≥
    if err := saveLog(logEntry); err != nil {
        log.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–∞: %v", err)
    }

    fmt.Printf("‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω! –°—Ç–∞—Ç—É—Å: %s\n", logEntry.Status)
    fmt.Printf("üìÅ –õ–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: logs/%s.json\n", logEntry.ID)
}

func startAPIServer() {
    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if err := os.MkdirAll("logs", 0755); err != nil {
        log.Fatal("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏ logs: ", err)
    }

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Gin
    gin.SetMode(gin.ReleaseMode)
    router := gin.Default()

    // Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    router.Use(gin.Logger())

    // –†–æ—É—Ç—ã API
    router.POST("/api/send", handleSendEmail)
    router.GET("/api/status/:id", handleGetStatus)
    router.GET("/api/health", handleHealthCheck)

    fmt.Printf("üöÄ REST API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É %s\n", apiPort)
    fmt.Printf("üìß –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã:\n")
    fmt.Printf("   POST /api/send     - –û—Ç–ø—Ä–∞–≤–∫–∞ email\n")
    fmt.Printf("   GET  /api/status/:id - –°—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏\n")
    fmt.Printf("   GET  /api/health   - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è\n")

    if err := router.Run(apiPort); err != nil {
        log.Fatal("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ API —Å–µ—Ä–≤–µ—Ä–∞: ", err)
    }
}

func handleSendEmail(c *gin.Context) {
    var req SendEmailRequest
    if err := c.ShouldBindJSON(&req); err != nil {
        c.JSON(http.StatusBadRequest, gin.H{
            "error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞: " + err.Error(),
        })
        return
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
    if req.MessageID == "" {
        req.MessageID = generateMessageID()
    }

    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    config := &MailConfig{
        Host:        smtpHost,
        Port:        smtpPort,
        Username:    smtpUsername,
        Password:    smtpPassword,
        Subject:     req.Subject,
        Body:        req.Body,
        BodyFile:    req.BodyFile,
        IsHTML:      req.IsHTML,
        Attachments: strings.Join(req.Attachments, ","),
        MessageID:   req.MessageID,
    }

    // –°–æ–∑–¥–∞–µ–º –ª–æ–≥
    logEntry := &EmailLog{
        ID:         req.MessageID,
        Timestamp:  time.Now(),
        From:       smtpUsername,
        Subject:    req.Subject,
        Recipients: make([]RecipientStatus, 0, len(req.To)),
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
    go sendEmailsAsync(config, req.To, logEntry)

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
    c.JSON(http.StatusAccepted, SendEmailResponse{
        ID:      req.MessageID,
        Status:  "accepted",
        Message: "–ü–∏—Å—å–º–æ –ø—Ä–∏–Ω—è—Ç–æ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É",
    })
}

func handleGetStatus(c *gin.Context) {
    id := c.Param("id")
    if id == "" {
        c.JSON(http.StatusBadRequest, gin.H{
            "error": "ID –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω",
        })
        return
    }

    // –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ª–æ–≥ —Ñ–∞–π–ª
    logEntry, err := readLog(id)
    if err != nil {
        c.JSON(http.StatusNotFound, gin.H{
            "error": "–õ–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω",
        })
        return
    }

    // –°–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç
    response := StatusResponse{
        ID:        logEntry.ID,
        Timestamp: logEntry.Timestamp,
        Status:    logEntry.Status,
        Details:   logEntry.Recipients,
    }

    c.JSON(http.StatusOK, response)
}

func handleHealthCheck(c *gin.Context) {
    c.JSON(http.StatusOK, gin.H{
        "status":    "healthy",
        "timestamp": time.Now(),
        "service":   "Email Sender API",
    })
}

func readLog(id string) (*EmailLog, error) {
    filename := fmt.Sprintf("%s.json", id)
    filepath := filepath.Join("logs", filename)

    data, err := os.ReadFile(filepath)
    if err != nil {
        return nil, err
    }

    var logEntry EmailLog
    if err := json.Unmarshal(data, &logEntry); err != nil {
        return nil, err
    }

    return &logEntry, nil
}

func getRecipients(config *MailConfig) ([]string, error) {
    var recipients []string

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–ª–∞–≥–∞ -to
    if config.To != "" {
        toRecipients := parseRecipients(config.To)
        recipients = append(recipients, toRecipients...)
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞
    if config.ToFile != "" {
        fileRecipients, err := loadRecipientsFromFile(config.ToFile)
        if err != nil {
            return nil, err
        }
        recipients = append(recipients, fileRecipients...)
    }

    // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    recipients = removeDuplicates(recipients)

    return recipients, nil
}

func loadRecipientsFromFile(filename string) ([]string, error) {
    // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    data, err := os.ReadFile(filename)
    if err != nil {
        return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ %s: %v", filename, err)
    }

    // –ü–∞—Ä—Å–∏–º JSON
    var recipientsFile RecipientsFile
    if err := json.Unmarshal(data, &recipientsFile); err != nil {
        return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON —Ñ–∞–π–ª–∞ %s: %v", filename, err)
    }

    // –û—á–∏—â–∞–µ–º email –∞–¥—Ä–µ—Å–∞
    var cleanRecipients []string
    for _, email := range recipientsFile.Emails {
        email = strings.TrimSpace(email)
        if email != "" && isValidEmail(email) {
            cleanRecipients = append(cleanRecipients, email)
        }
    }

    if len(cleanRecipients) == 0 {
        return nil, fmt.Errorf("—Ñ–∞–π–ª %s –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö email –∞–¥—Ä–µ—Å–æ–≤", filename)
    }

    return cleanRecipients, nil
}

func parseRecipients(recipientsStr string) []string {
    recipients := strings.Split(recipientsStr, ",")
    var cleanRecipients []string
    for _, r := range recipients {
        r = strings.TrimSpace(r)
        if r != "" && isValidEmail(r) {
            cleanRecipients = append(cleanRecipients, r)
        }
    }
    return cleanRecipients
}

func removeDuplicates(emails []string) []string {
    seen := make(map[string]bool)
    var result []string
    for _, email := range emails {
        if !seen[email] {
            seen[email] = true
            result = append(result, email)
        }
    }
    return result
}

func isValidEmail(email string) bool {
    // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ email
    return strings.Contains(email, "@") && strings.Contains(email, ".")
}

func generateMessageID() string {
    return uuid.New().String()
}

func sendEmailsAsync(config *MailConfig, recipients []string, logEntry *EmailLog) {
    var wg sync.WaitGroup
    var mu sync.Mutex

    fmt.Printf("üöÄ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ %d –ø–∏—Å–µ–º...\n", len(recipients))

    for _, recipient := range recipients {
        wg.Add(1)
        go func(to string) {
            defer wg.Done()
            
            recipientStatus := RecipientStatus{
                Email: to,
                Time:  time.Now(),
            }

            if err := sendEmail(config, to, logEntry); err != nil {
                recipientStatus.Status = "error"
                recipientStatus.Error = err.Error()
            } else {
                recipientStatus.Status = "success"
                recipientStatus.Message = "–ü–∏—Å—å–º–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
            }

            // –ë–µ–∑–æ–ø–∞—Å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ª–æ–≥
            mu.Lock()
            logEntry.Recipients = append(logEntry.Recipients, recipientStatus)
            mu.Unlock()

            // –í—ã–≤–æ–¥–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –∫–æ–Ω—Å–æ–ª—å
            if recipientStatus.Status == "success" {
                fmt.Printf("   ‚úÖ –£—Å–ø–µ—à–Ω–æ: %s\n", to)
            } else {
                fmt.Printf("   ‚ùå –û—à–∏–±–∫–∞: %s - %s\n", to, recipientStatus.Error)
            }
        }(recipient)
    }

    wg.Wait()

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫
    if allSuccess(logEntry.Recipients) {
        logEntry.Status = "success"
    } else if anySuccess(logEntry.Recipients) {
        logEntry.Status = "partial_success"
    } else {
        logEntry.Status = "failed"
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ª–æ–≥
    if err := saveLog(logEntry); err != nil {
        fmt.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–∞: %v\n", err)
    } else {
        fmt.Printf("üìÅ –õ–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: logs/%s.json\n", logEntry.ID)
    }
}

func sendEmail(config *MailConfig, recipient string, logEntry *EmailLog) error {
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
    client, err := mail.NewClient(config.Host, 
        mail.WithPort(config.Port),
        mail.WithSMTPAuth(mail.SMTPAuthPlain),
        mail.WithUsername(config.Username),
        mail.WithPassword(config.Password),
        mail.WithTLSPolicy(mail.TLSMandatory),
    )
    if err != nil {
        return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: %v", err)
    }

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º TLS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    tlsConfig := &tls.Config{
        InsecureSkipVerify: true,
        ServerName:         config.Host,
    }
    client.SetTLSConfig(tlsConfig)

    // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    msg := mail.NewMsg()
    
    if err := msg.From(config.Username); err != nil {
        return fmt.Errorf("–æ—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: %v", err)
    }
    if err := msg.To(recipient); err != nil {
        return fmt.Errorf("–æ—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è: %v", err)
    }
    
    msg.Subject(config.Subject)
    
    // –¢–µ–ª–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    body := config.Body
    if config.BodyFile != "" {
        content, err := os.ReadFile(config.BodyFile)
        if err != nil {
            return fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: %v", err)
        }
        body = string(content)
    }
    
    if config.IsHTML {
        msg.SetBodyString(mail.TypeTextHTML, body)
    } else {
        msg.SetBodyString(mail.TypeTextPlain, body)
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤–ª–æ–∂–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å
    if config.Attachments != "" {
        files := strings.Split(config.Attachments, ",")
        for _, file := range files {
            file = strings.TrimSpace(file)
            if file != "" {
                msg.AttachFile(file)
            }
        }
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
    if err := client.DialAndSend(msg); err != nil {
        return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: %v", err)
    }

    return nil
}

func saveLog(logEntry *EmailLog) error {
    // –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ ID
    filename := fmt.Sprintf("%s.json", logEntry.ID)
    filepath := filepath.Join("logs", filename)

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º JSON —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏
    jsonData, err := json.MarshalIndent(logEntry, "", "  ")
    if err != nil {
        return fmt.Errorf("–æ—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: %v", err)
    }

    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª
    if err := os.WriteFile(filepath, jsonData, 0644); err != nil {
        return fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞: %v", err)
    }

    return nil
}

func allSuccess(recipients []RecipientStatus) bool {
    for _, r := range recipients {
        if r.Status != "success" {
            return false
        }
    }
    return true
}

func anySuccess(recipients []RecipientStatus) bool {
    for _, r := range recipients {
        if r.Status == "success" {
            return true
        }
    }
    return false
}
